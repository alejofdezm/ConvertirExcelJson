'====================================================================================
' MÓDULO PARA SELECCIONAR, COMPRIMIR Y ENVIAR PDFs A UN API
' VERSIÓN: 2.0 (Con función de compresión mejorada y robusta)
' Creado por: Asistente de IA de Google
' Fecha: 25/06/2025
'
' INSTRUCCIONES:
' 1. Ir a Herramientas > Referencias en el editor de VBA.
' 2. Asegurarse de que las siguientes librerías estén marcadas:
'    - Microsoft XML, v6.0
'    - Microsoft Scripting Runtime
' 3. Reemplazar los valores de las constantes API_URL y API_KEY.
' 4. Asignar las macros a los botones correspondientes en la hoja de Excel.
'====================================================================================
Option Explicit

' --- VARIABLES PÚBLICAS para almacenar las rutas de los archivos ---
' Estas variables mantienen su valor mientras el libro de Excel esté abierto.
Public sRutaPDF1 As String
Public sRutaPDF2 As String
Public sRutaPDF3 As String

' --- CONFIGURACIÓN DEL API (¡IMPORTANTE!) ---
' !!! REEMPLAZA ESTOS VALORES CON TUS DATOS REALES !!!
Private Const API_URL As String = "https://tu-api.com/endpoint/subir-caso" ' Reemplaza con la URL de tu API
Private Const API_KEY As String = "TU-X-API-KEY-AQUI"                  ' Reemplaza con tu API Key

' ===================================================================================
'  MACROS PARA LOS BOTONES DE SELECCIÓN DE ARCHIVOS
' ===================================================================================

' --- MACRO PARA EL BOTÓN 1: SELECCIONAR EL PRIMER PDF ---
Sub SeleccionarPDF1()
    Dim sRuta As Variant
    sRuta = Application.GetOpenFilename("Archivos PDF (*.pdf), *.pdf", , "Seleccionar primer PDF")
    
    If sRuta <> False Then
        sRutaPDF1 = sRuta
        ' Asume que la hoja se llama "Hoja1". Cambiar si es necesario.
        ThisWorkbook.Sheets("Hoja1").Range("D1").Value = sRutaPDF1
    End If
End Sub

' --- MACRO PARA EL BOTÓN 2: SELECCIONAR EL SEGUNDO PDF ---
Sub SeleccionarPDF2()
    Dim sRuta As Variant
    sRuta = Application.GetOpenFilename("Archivos PDF (*.pdf), *.pdf", , "Seleccionar segundo PDF")
    
    If sRuta <> False Then
        sRutaPDF2 = sRuta
        ThisWorkbook.Sheets("Hoja1").Range("D2").Value = sRutaPDF2
    End If
End Sub

' --- MACRO PARA EL BOTÓN 3: SELECCIONAR EL TERCER PDF ---
Sub SeleccionarPDF3()
    Dim sRuta As Variant
    sRuta = Application.GetOpenFilename("Archivos PDF (*.pdf), *.pdf", , "Seleccionar tercer PDF")
    
    If sRuta <> False Then
        sRutaPDF3 = sRuta
        ThisWorkbook.Sheets("Hoja1").Range("D3").Value = sRutaPDF3
    End If
End Sub


' ===================================================================================
'  MACRO PRINCIPAL: COMPRIME LOS ARCHIVOS Y LOS ENVÍA AL API
' ===================================================================================
Sub ComprimirYEnviarAPI()
    ' --- 1. Validación de Archivos ---
    If sRutaPDF1 = "" Or sRutaPDF2 = "" Or sRutaPDF3 = "" Then
        MsgBox "Error: Debes seleccionar los 3 archivos PDF antes de continuar.", vbCritical, "Archivos Faltantes"
        Exit Sub
    End If

    Dim sRutaZip As String
    sRutaZip = Environ("TEMP") & "\caso_" & Format(Now, "yyyymmdd_hhmmss") & ".zip"
    
    Application.StatusBar = "Comprimiendo archivos..."
    
    ' --- 2. Crear archivo ZIP usando la función mejorada ---
    If Not CrearZipConArchivos(sRutaZip, sRutaPDF1, sRutaPDF2, sRutaPDF3) Then
        ' El mensaje de error específico ya fue mostrado por la función CrearZipConArchivos
        Application.StatusBar = False
        Exit Sub
    End If
    
    ' --- 3. Leer el archivo ZIP en formato binario para el envío ---
    Dim objFSO As Object
    Dim objStream As Object
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    If Not objFSO.FileExists(sRutaZip) Then
        MsgBox "No se encontró el archivo ZIP temporal para el envío.", vbCritical, "Error Interno"
        Exit Sub
    End If
    
    Set objStream = CreateObject("ADODB.Stream")
    objStream.Type = 1 ' adTypeBinary
    objStream.Open
    objStream.LoadFromFile sRutaZip
    Dim zipData() As Byte
    zipData = objStream.Read
    objStream.Close
    
    ' --- 4. Enviar el archivo ZIP al API ---
    Application.StatusBar = "Enviando datos al servidor API..."
    
    Dim objHttp As Object
    Set objHttp = CreateObject("MSXML2.XMLHTTP.6.0")
    
    On Error GoTo ErrorAPI
    
    objHttp.Open "POST", API_URL, False
    objHttp.SetRequestHeader "x-api-key", API_KEY
    objHttp.SetRequestHeader "Content-Type", "application/zip"
    objHttp.send zipData
    
    Application.StatusBar = "Procesando respuesta del servidor..."
    
    ' --- 5. Procesar la respuesta JSON ---
    If objHttp.Status = 200 Then ' 200 = OK (Petición exitosa)
        Dim sRespuesta As String
        sRespuesta = objHttp.responseText
        
        Dim mensaje As String
        Dim idCaso As String
        
        mensaje = ParsearJsonSimple(sRespuesta, "message")
        idCaso = ParsearJsonSimple(sRespuesta, "idcaso")
        
        MsgBox "¡Proceso completado con éxito!" & vbCrLf & vbCrLf & _
               "Mensaje: " & mensaje & vbCrLf & _
               "ID del Caso: " & idCaso, vbInformation, "Resultado del API"
    Else
        MsgBox "El servidor devolvió un error." & vbCrLf & _
               "Status: " & objHttp.Status & " - " & objHttp.statusText & vbCrLf & vbCrLf & _
               "Respuesta del servidor: " & objHttp.responseText, vbCritical, "Error de API"
    End If

    GoTo Cleanup

ErrorAPI:
    MsgBox "No se pudo conectar al API." & vbCrLf & _
           "Verifica la URL del API y tu conexión a internet.", vbCritical, "Error de Conexión"

Cleanup:
    ' --- 6. Limpieza de objetos y archivos temporales ---
    On Error Resume Next ' Ignora errores si los objetos ya están cerrados
    objStream.Close
    Set objStream = Nothing
    Set objHttp = Nothing
    If objFSO.FileExists(sRutaZip) Then
        objFSO.DeleteFile sRutaZip, True ' Elimina el archivo ZIP temporal
    End If
    Set objFSO = Nothing
    Application.StatusBar = False
    On Error GoTo 0
End Sub


' ===================================================================================
'  FUNCIONES AUXILIARES
' ===================================================================================

' --- FUNCIÓN MEJORADA PARA CREAR EL ARCHIVO ZIP ---
' Esta versión es más robusta, verifica la existencia de archivos y evita bucles infinitos.
Private Function CrearZipConArchivos(rutaZip As String, ParamArray archivos() As Variant) As Boolean
    Dim objFSO As Object, objShell As Object, zipFile As Object
    Dim i As Integer, j As Integer
    Dim initialFileCount As Long
    
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objShell = CreateObject("Shell.Application")
    
    On Error GoTo ZipError
    
    ' --- VALIDACIÓN PREVIA: Verificar que todos los archivos de origen existen ---
    For i = LBound(archivos) To UBound(archivos)
        If Not objFSO.FileExists(archivos(i)) Then
            MsgBox "Error Crítico: El archivo fuente no existe o la ruta es incorrecta." & vbCrLf & vbCrLf & _
                   "Archivo: " & archivos(i), vbCritical, "Archivo no Encontrado"
            GoTo Cleanup ' Sale de la función si un archivo no existe
        End If
    Next i
    
    ' --- Crear un archivo ZIP vacío (necesario para que Shell lo reconozca) ---
    Set zipFile = objFSO.CreateTextFile(rutaZip, True)
    zipFile.Write "PK" & Chr(5) & Chr(6) & String(18, 0)
    zipFile.Close

    ' --- Bucle de copia MEJORADO con TIMEOUT ---
    For i = LBound(archivos) To UBound(archivos)
        initialFileCount = objShell.Namespace(CVar(rutaZip)).Items.Count
        objShell.Namespace(CVar(rutaZip)).CopyHere CVar(archivos(i))
        
        j = 0
        Do
            Application.Wait (Now + TimeValue("0:00:01"))
            j = j + 1
            If j > 15 Then ' Timeout de 15 segundos
                 MsgBox "Error de Timeout: El archivo no pudo ser copiado al ZIP en 15 segundos." & vbCrLf & vbCrLf & _
                        "Posibles causas: El archivo está bloqueado, es muy grande o hay un problema de permisos." & vbCrLf & _
                        "Archivo: " & objFSO.GetFileName(archivos(i)), vbCritical, "Error de Compresión"
                 GoTo Cleanup
            End If
        Loop Until objShell.Namespace(CVar(rutaZip)).Items.Count > initialFileCount
    Next i
    
    CrearZipConArchivos = True ' Si todo fue bien, devuelve True
    GoTo Cleanup

ZipError:
    MsgBox "Ocurrió un error inesperado durante el proceso de compresión." & vbCrLf & _
           "Error #" & Err.Number & ": " & Err.Description, vbCritical, "Error de Compresión"
    CrearZipConArchivos = False ' Si hubo un error, devuelve False

Cleanup:
    ' Liberar todos los objetos de memoria para evitar fugas
    Set objShell = Nothing
    Set zipFile = Nothing
    Set objFSO = Nothing
End Function


' --- FUNCIÓN AUXILIAR PARA PARSEAR JSON DE FORMA SIMPLE ---
' Nota: Esta función es básica. Para JSON complejos, se recomendaría una librería externa.
Private Function ParsearJsonSimple(jsonString As String, clave As String) As String
    Dim posClave As Long, posInicio As Long, posFin As Long
    Dim valor As String
    
    On Error GoTo ParseError
    
    ' Busca la clave entre comillas para asegurar que es la clave y no un valor
    posClave = InStr(1, jsonString, """" & clave & """", vbTextCompare)
    If posClave = 0 Then GoTo ParseError
    
    ' Busca los dos puntos (:) y luego la comilla (") de apertura del valor
    posInicio = InStr(posClave, jsonString, ":")
    posInicio = InStr(posInicio + 1, jsonString, """")
    If posInicio = 0 Then GoTo ParseError
    
    ' Busca la comilla de cierre del valor
    posFin = InStr(posInicio + 1, jsonString, """")
    If posFin = 0 Then GoTo ParseError
    
    ' Extrae el valor entre las comillas
    valor = Mid(jsonString, posInicio + 1, posFin - posInicio - 1)
    ParsearJsonSimple = valor
    Exit Function

ParseError:
    ParsearJsonSimple = "[No se encontró el valor para '" & clave & "']"
End Function


